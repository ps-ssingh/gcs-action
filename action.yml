apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'GCP Storage Action'
description: 'Uploads and downloads files to/from Google Cloud Storage.'

inputs:
  source_file:
    description: 'The file path to be sourced from. Can be a local file or a GCP storage file (gs://).'
    required: true
  destination_file:
    description: 'The file path to be uploaded to. Can be a local file or a GCP storage file.'
    required: true
  application_credentials:
    description: 'Base64-encoded IAM credentials for accessing the GCP bucket.'
    required: true
  project_id:
    description: 'The project ID that the bucket lives under.'
    required: true
  flags:
    description: 'Additional flags to be passed to the gsutil command.'
    default: ''
  command:
    description: 'The gsutil command to execute (e.g., cp, rsync).'
    required: true
  sync_dir_from:
    description: 'Directory to sync from. Required if command is rsync.'
    required: false
  sync_dir_to:
    description: 'Directory to sync to. Required if command is rsync.'
    required: false
  exclude:
    description: 'Pattern to exclude files from sync. Used with rsync command.'
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Decode GCP Credentials
      uses: docker://google/cloud-sdk
      shell: bash
      run: |
        set -x

        #Set GCP Project ID
        echo "${{ inputs.application_credentials }}" | base64 --decode > gcp-credentials.json
        #gcloud auth activate-service-account --key-file="${{ inputs.application_credentials}}"
        gcloud auth activate-service-account --key-file="gcp-credentials.json"
        gcloud config set project ${{ inputs.project_id }}

        if [ "${{ inputs.command }}" = "rsync" ]; then
          gsutil -m rsync -r -c -d -x "${{ inputs.exclude }}" "${{ inputs.sync_dir_from }}" "${{ inputs.sync_dir_to }}"
          if [ $? -ne 0 ]; then
            echo "Syncing failed"
            exit 1
          fi
        elif [ "${{ inputs.command }}" = "cp" ]; then
          gsutil ${{ inputs.flags }} cp ${{ inputs.source_file }} ${{ inputs.destination_file }}
        
        echo "Done"
      env:
        GOOGLE_APPLICATION_CREDENTIALS: gcp-credentials.json
